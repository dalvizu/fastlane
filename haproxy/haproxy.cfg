global
  log /dev/log    local0
  # use your settings here
defaults
  log     global
  mode    http
  # Use your settings here

# This is the frontend ingress for traffic all traffic coming in on https comes through here
# and is directed to different backends based on information of the request.
frontend https-ingress
  bind *:443 ssl no-sslv3 crt /ssl/some.cert.pem
  option forwardfor
  # This sets an ACL of avoid-canary if less than 1 server is alive in the canary-service-name backend
  acl canary-down nbsrv(canary-service-name) lt 1
  # This ACL is for routing traffic to canary backend IF you have an IP in the list (file)
  acl canary src -f /etc/haproxy/pingidentity_office_ip.list
  # This ACL is to send you to canary backend if you have the Use-Canary-Release
  # cookie or header set to True
  acl canary req.hdr(Use-Canary) -m str True
  acl canary req.cook(Use-Canary) -m str True
  # This sets an ACL of avoid-canary if the user has a specific cookie or header
  acl avoid-canary req.hdr(Use-Canary) -m str False
  acl avoid-canary req.cook(Use-Canary) -m str False
  # This header addition takes place if we wanted to use canary. This allows us to pass this "canary context"
  # along to sub-services that it may be important to.
  # We also want to avoid canary through our entire event stream so if we explicitly opt-out of canary
  # this information should be passed along inherintly by the pool of apps.
  http-request set-header Use-Canary True if canary !avoid-canary
  # When use_backend is engaged and points to a "listen" config, it will bypass the TCP input and use the
  # servers in the backend pool of the listen group.
  # The use_backend features are parsed in order so if avoid-canary is true then send directly to the live backend
  # regardless of if the previous canary ACLs are true
  use_backend service-name if canary-down
  use_backend service-name if avoid-canary
  # This is to send traffic to canary backend when it's not down
  use_backend canary-service-name if canary
  # If no ACLs were triggered (ie: you don't have the header, or ip, and canary is up then...) send to canary-shim
  default_backend canary-shim
  monitor-uri /dns_monitor_uri
  monitor fail if { nbsrv(service-name) lt 1 }

# Listen command creates both a frontend and a backend.
# The frontend is not SSL and binds only to locally accessible traffic.
# The inter/fastinter/downinter is set to optimize failing out servers after a restart
# When the https-ingress hits the ACLs and routes traffic to the service-name backend
# it will BYPASS the TCP bind and go directly to the servers in this pool from the frontend.
# The only time the "bind" part of this frontend is used is when it goes through canary-shim.
listen service-name
  bind 127.0.0.1:8181
  balance roundrobin
  default-server inter 10s fastinter 3s downinter 30s
  monitor-uri /monitor_uri
  monitor fail if { nbsrv(service-name) lt 1 }
  option httpchk GET /my-health-check/1.2.3
  server my-server-name-here 1.2.3.4:80

# Listen command creates both a frontend and a backend.
# The frontend is not SSL and binds only to locally accessible traffic.
# The inter/fastinter/downinter is set to optimize failing out servers after a restart
# When the https-ingress hits the ACLs and routes traffic to the canary-service-name backend
# it will BYPASS the TCP bind and go directly to the servers in this pool from the frontend.
# The only time the "bind" part of this frontend is used is when it goes through canary-shim.
listen canary-service-name
  bind 127.0.0.1:8282
  balance roundrobin
  default-server inter 10s fastinter 3s downinter 30s
  monitor-uri /monitor_uri
  monitor fail if { nbsrv(canary-service-name) lt 1 }
  http-response add-header Set-Cookie last_canary_hit=%Ts;\ Path=/;\ Secure;\ HttpOnly
  option httpchk GET /my-health-check/2.3.4
  server my-server-name-here 2.3.4.5:80

# This backend is a static configuration that only has two elements in it:
# 1) a live-backend and 2) a canary-backend. The default weight of the canary after restart is 0%
# thus sending 100% of traffic to live. Weights can be changes in flight without a restart.
# If traffic goes through this backend it will have a route cookie set only for a maxlife
# of 2h or an idle time of 15m.
backend canary-shim
  option http-server-close
  balance roundrobin
  cookie route insert httponly secure maxidle 15m maxlife 2h
  option redispatch
  default-server inter 10s downinter 30s
  # monitor-uri will check the internal haproxy health of each backend
  option httpchk GET /monitor_uri
  # You can adjust the weight of the canary live via the socket to increase and decrease canary traffic
  server canary-backend 127.0.0.1:8282 cookie canary check rise 1 fall 1 weight 0
  server live-backend 127.0.0.1:8181 cookie live check rise 3 fall 3 weight 90
